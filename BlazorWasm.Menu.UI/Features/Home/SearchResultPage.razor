@page "/search/{SearchText}"
@page "/search/{SearchText}/maxTime/{MaxTime:int}"

@inject HttpClient _httpClient


<SearchFilter SearchText="@SearchText"></SearchFilter>


<div class="container">
	@if (Recipes == null)
	{
		<p>Loading...</p>
	}
	else
	{
		<div class="row row-cols-sm-1 row-cols-md-2 row-cols-lg-3 g-3">
			@foreach (var recipe in Recipes)
			{
				<RecipeCard Recipe="recipe" OnSelectedRecipe="@OnSelectedRecipeHandler"></RecipeCard>
			}
		</div>

		<RecipeDetails Recipe="Recipe"></RecipeDetails>
	}
</div>

@code {

	[Parameter]
	public string SearchText { get; set; }

	[Parameter]
	public int MaxTime { get; set; } = 0;

	public IEnumerable<Recipe> Recipes { get; set; }

	public Recipe Recipe { get; set; }


	protected override async Task OnInitializedAsync()
	{
		try
		{
			Recipes = (await _httpClient.GetFromJsonAsync<IEnumerable<Recipe>>("/Data.json"))
			.Where(r => r.Name.Contains(SearchText) || r.Description.Contains(SearchText))
			.Where(r => MaxTime == 0 || r.TimeInMinutes <= MaxTime);
		}
		catch (Exception ex)
		{

			Console.WriteLine($"Badness ->> {ex.Message}");
		}
	}

	private void OnSelectedRecipeHandler(Recipe recipe)
	{
		this.Recipe = recipe;
	}

}
